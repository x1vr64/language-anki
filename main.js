/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianLanguageAnkiPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  googleApiKey: "default"
};
var ObsidianLanguageAnkiPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    function isOnlyBulletPrefix(value) {
      return value.startsWith("- [") || value === "-";
    }
    this.addCommand({
      id: "translate-word",
      name: "Translate selected word",
      hotkeys: [{ modifiers: ["Mod", "Shift"], key: "a" }],
      editorCallback: (editor) => {
        if (this.settings.googleApiKey === "default") {
          new import_obsidian.Notice("Google api key not set");
          return;
        }
        const DELIMITER = " = ";
        const currentLine = editor.getCursor().line;
        const value = editor.getLine(currentLine);
        if (value.length === 0 || isOnlyBulletPrefix(value)) {
          return;
        }
        if (value.contains(DELIMITER)) {
          return;
        }
        this.translateWord(value).then((res) => editor.setLine(currentLine, `${value}${DELIMITER}${res}`));
      }
    });
    this.addSettingTab(new AnkiSettingTab(this.app, this));
  }
  async translateWord(value) {
    const url = "https://translation.googleapis.com/language/translate/v2";
    const body = {
      "q": value,
      "source": "en",
      "target": "ru",
      "format": "text"
    };
    const response = await (0, import_obsidian.requestUrl)({
      throw: false,
      method: "POST",
      url,
      body: JSON.stringify(body),
      headers: {
        "Authorization": `Bearer ${this.settings.googleApiKey}`,
        "x-goog-user-project": "neat-striker-377509"
      },
      contentType: "application/json; charset=utf-8"
    });
    if (response.status != 200) {
      return JSON.stringify(response, null, 2);
    }
    return response.json["data"]["translations"][0]["translatedText"];
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var AnkiSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Language Anki settings" });
    new import_obsidian.Setting(containerEl).setName("Google api key").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.googleApiKey).onChange(async (value) => {
      this.plugin.settings.googleApiKey = value;
      await this.plugin.saveSettings();
    }));
  }
};
